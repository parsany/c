[
  {
    "id": "P1",
    "name": "Post 1: Dynamic Simulation in C++",
    "title": "Dynamic Simulation in C++",
    "description": "Learn how to create a dynamic simulation in C++ to simulate real-world systems.",
    "date": "Jan 10, 2000",
    "emoji": "üñ•Ô∏è",
    "link": "#",
    "tags": ["C++", "Simulation", "Programming"],
    "body": "In this post, we will learn how to create a dynamic simulation in C++. We will focus on simulating a simple system where the state evolves over time based on user inputs.\n\n### Example Code\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Particle {\npublic:\n    float x, y;\n    Particle(float x, float y) : x(x), y(y) {}\n    void update() {\n        x += 0.1f;\n        y += 0.1f;\n    }\n};\n\nint main() {\n    std::vector<Particle> particles;\n    particles.push_back(Particle(0.0f, 0.0f));\n\n    for (int i = 0; i < 10; ++i) {\n        for (auto& particle : particles) {\n            particle.update();\n            std::cout << \"Particle position: \" << particle.x << \", \" << particle.y << std::endl;\n        }\n    }\n    return 0;\n}\n```\n\nThis C++ code demonstrates a basic simulation where particles update their positions over time."
  },
  {
    "id": "P2",
    "name": "Post 2: Understanding JavaScript Closures",
    "title": "Understanding JavaScript Closures",
    "description": "Learn what closures are in JavaScript and how to use them effectively.",
    "date": "Feb 15, 2000",
    "emoji": "üîí",
    "link": "#",
    "tags": ["JavaScript", "Closures", "Programming"],
    "body": "Closures are a powerful feature of JavaScript that allow a function to remember its lexical scope even after it has been executed. Let's dive into closures and how they work.\n\n### Example Code\n\n```javascript\nfunction outer() {\n  let count = 0;\n  return function inner() {\n    count++;\n    console.log(count);\n  }\n}\n\nconst counter = outer();\ncounter(); // 1\ncounter(); // 2\ncounter(); // 3\n```\n\nIn the above example, the `inner` function forms a closure that 'remembers' the `count` variable from the `outer` function."
  },
  {
    "id": "P3",
    "name": "Post 3: The Power of CSS Grid",
    "title": "The Power of CSS Grid",
    "description": "Discover the flexibility and power of CSS Grid to create complex layouts.",
    "date": "Apr 10, 2001",
    "emoji": "üó∫Ô∏è",
    "link": "#",
    "tags": ["CSS", "Grid", "Web Design"],
    "body": "CSS Grid is a powerful layout system that allows for complex and responsive layouts with ease. In this post, we'll explore the basics of CSS Grid and build a simple layout.\n\n### Example Code\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n}\n\n.item {\n  background-color: #f0f0f0;\n  padding: 20px;\n  text-align: center;\n}\n```\n\n```html\n<div class=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <div class=\"item\">Item 3</div>\n</div>\n```\n\nThis CSS Grid layout creates a simple three-column design with a gap between each item."
  },
  {
    "id": "P4",
    "name": "Post 4: Mastering Asynchronous JavaScript",
    "title": "Mastering Asynchronous JavaScript",
    "description": "Understand how async/await and Promises work to handle asynchronous operations in JavaScript.",
    "date": "Mar 20, 2000",
    "emoji": "‚è≥",
    "link": "#",
    "tags": ["JavaScript", "Asynchronous", "Promises"],
    "body": "Asynchronous JavaScript is an essential concept in modern web development. Let's explore how async/await and Promises work to handle asynchronous operations.\n\n### Example Code\n\n```javascript\nfunction fetchData(url) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(`Data from ${url}`);\n    }, 2000);\n  });\n}\n\nasync function displayData() {\n  try {\n    const data = await fetchData('https://api.example.com');\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ndisplayData();\n```\n\nIn this example, we use `async/await` to handle the asynchronous operation of fetching data, simplifying the code compared to using traditional Promises."
  },
    {
      "id": "P5",
      "name": "Post 5: Introduction to Python Decorators üêç",
      "title": "Introduction to Python Decorators",
      "description": "Learn about decorators in Python and how they enhance the functionality of functions.",
      "date": "Jan 25, 2001",
      "emoji": "üêç",
      "link": "#",
      "tags": ["Python", "Decorators", "Programming"],
      "body": "Decorators in Python are a way to modify the behavior of a function or class. In this post, we'll learn how decorators work and how to use them effectively.\n\n### Example Code\n\n```python\ndef decorator(func):\n    def wrapper():\n        print('Before the function is called')\n        func()\n        print('After the function is called')\n    return wrapper\n\n@decorator\ndef say_hello():\n    print('Hello, World!')\n\nsay_hello()\n```\n\nIn this example, the `say_hello` function is decorated to add extra functionality before and after the function call."
    },
    {
      "id": "P6",
      "name": "Post 6: Understanding React Hooks",
      "title": "Understanding React Hooks",
      "description": "Get an introduction to React Hooks and learn how they simplify managing state and side effects in React.",
      "date": "Feb 1, 2001",
      "emoji": "‚öõÔ∏è",
      "link": "#",
      "tags": ["React", "Hooks", "JavaScript"],
      "body": "React Hooks provide a simpler and cleaner way to manage state and side effects in functional components. Let's explore the basics of React Hooks.\n\n### Example Code\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Component rendered');\n  }, []);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n\nexport default Counter;\n```\n\nIn this example, we use `useState` to manage the state and `useEffect` to handle side effects in a functional component."
    },
    {
      "id": "P7",
      "name": "Post 7: Introduction to SQL Joins",
      "title": "Introduction to SQL Joins",
      "description": "Understand the different types of SQL joins and how they are used to retrieve related data from multiple tables.",
      "date": "Feb 5, 2001",
      "emoji": "üîó",
      "link": "#",
      "tags": ["SQL", "Databases", "Programming"],
      "body": "SQL joins are used to combine rows from two or more tables based on a related column. We'll explore the different types of joins in SQL.\n\n### Example Code\n\n```sql\nSELECT employees.name, departments.name\nFROM employees\nJOIN departments ON employees.department_id = departments.id;\n```\n\nIn this example, we use an inner join to retrieve data from two related tables: `employees` and `departments`."
    }
  ]
  